/*
BOX COLUMN FUNCTIONS
*/
@function bx-span($cols,$dividerby,$tight){
  $number: (100% / $dividerby) * $cols;
  @if $tight == true {
    @return $number;
  } @else {
    @return calc( #{$number} - #{$gutterX} );
  }
}

/* BOX SIZE OUTPUTS */
@mixin span-output-single($s, $count, $attr) {
  // spans
  @for $i from 0 through $count {
    @if( $i==0 ) {
      > .box[data-span-#{$s}="#{$i}"] { display: none; }
    } @else {
      > .box[data-span-#{$s}="#{$i}"] {
        #{$attr}: bx-span($i,$count,false);
        flex-grow: 0;
        display: block;
      }
      &[data-gutters="tight"] > .box[data-span-#{$s}="#{$i}"] {
        #{$attr}: bx-span($i,$count,true);
        flex-grow: 0;
        display: block;
      }
    }
  }
  // fill
  > .box[data-span-#{$s}="fill"],
  &[data-gutters="tight"] > .box[data-span-#{$s}="fill"] {
    flex-grow: 1;
    #{$attr}: auto;
    display: block;
  }
  // auto
  > .box[data-span-#{$s}="auto"],
  &[data-gutters="tight"] > .box[data-span-#{$s}="auto"] {
    flex-grow: 0;
    #{$attr}: auto;
    display: block;
  }
}

/*
BOX ROWS
 */
@mixin bx-span-output($count, $attr){
  // tny
  @include span-output-single('tny', $count, $attr);
  // sml
  @media #{$media-sml-up} {
    @include span-output-single('sml', $count, $attr);
  }
  // med
  @media #{$media-med-up} {
    @include span-output-single('med', $count, $attr);
  }
  // lrg
  @media #{$media-lrg-up} {
    @include span-output-single('lrg', $count, $attr);
  }
  // xl
  @media #{$media-xl-up} {
    @include span-output-single('xl', $count, $attr);
  }
}

/*
BOX COLUMNS
 */
.boxes {

  // horizontal layout (default)
  display: flex;
  flex-direction: row;
  flex-wrap: wrap;
  margin-left: calc( #{$gutterX} / 2 );
  margin-right: calc( #{$gutterX} / 2 );

  // nester negative margins
  &[data-gutters="nested"] {
    margin-left: calc( -#{$gutterX} / 2 );
    margin-right: calc( -#{$gutterX} / 2 );
  }

  // tight margin overrides
  &[data-gutters="tight"] {
    margin-left: 0px;
    margin-right: 0px;
    > .box {
      margin: 0px;
    }
  }

  // horizontal layout (default)
  &:not([data-direction*="vertical"]) {
    @include bx-span-output( $default_cols, 'width' );
  }

  // vertical layout
  &[data-direction="vertical"] {
    flex-direction: column;
    align-items: center;
    @include bx-span-output( $default_cols, 'height' );

    // force box widths @ 100% for tight verticals
    &[data-gutters="tight"] {
      > .box {
        width: 100%;
        max-width: 100%;
      }
    }
  }

}

// outside the above scope to make style overrides easier
.box {
  margin-left: calc( #{$gutterX} / 2 );
  margin-right: calc( #{$gutterX} / 2 );
  margin-bottom: $gutterY;
  width: calc( 100% - #{$gutterX} );
  max-width: calc( 100% - #{$gutterX} );
}
