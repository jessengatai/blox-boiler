/*
BOX COLUMN FUNCTIONS
*/
@function bx-cols($cols,$dividerby,$tight){
  $number: (100% / $dividerby) * $cols;
  @if $tight == true {
    @return $number;
  } @else {
    @return calc( #{$number} - #{$gutterX} );
  }
}
@mixin bx-cols-output($count,$tight){
  // tny
  > .box[data-width-tny="fill"] { flex-grow: 1; }
  > .box[data-height-tny="fill"] { flex-grow: 1; }
  @for $i from 0 through $count {
    @if( $i==0 ) {
      > .box[data-width-tny="#{$i}"] { display: none; }
      > .box[data-height-tny="#{$i}"] { display: none; }
    } @else {
      > .box[data-width-tny="#{$i}"] { width: bx-cols($i,$count,$tight); display: block; }
      > .box[data-height-tny="#{$i}"] { height: bx-cols($i,$count,$tight); display: block; }
    }
  }
  // sml
  @media #{$media-sml-up} {
    > .box[data-width-sml="fill"] { flex-grow: 1; }
    > .box[data-height-sml="fill"] { flex-grow: 1; }
    @for $i from 0 through $count {
      @if( $i==0 ) {
        > .box[data-width-sml="#{$i}"] { display: none; }
        > .box[data-height-sml="#{$i}"] { display: none; }
      } @else {
        > .box[data-width-sml="#{$i}"] { width: bx-cols($i,$count,$tight); display: block; }
        > .box[data-height-sml="#{$i}"] { height: bx-cols($i,$count,$tight); display: block; }
      }
    }
  }
  // med
  @media #{$media-med-up} {
    > .box[data-width-med="fill"] { flex-grow: 1; }
    > .box[data-height-med="fill"] { flex-grow: 1; }
    @for $i from 0 through $count {
      @if( $i==0 ) {
        > .box[data-width-med="#{$i}"] { display: none; }
        > .box[data-height-med="#{$i}"] { display: none; }
      } @else {
        > .box[data-width-med="#{$i}"] { width: bx-cols($i,$count,$tight); display: block; }
        > .box[data-height-med="#{$i}"] { height: bx-cols($i,$count,$tight); display: block; }
      }
    }
  }
  // lrg
  @media #{$media-lrg-up} {
    > .box[data-width-lrg="fill"] { flex-grow: 1; }
    @for $i from 0 through $count {
      @if( $i==0 ) {
        > .box[data-width-lrg="#{$i}"] { display: none; }
      } @else {
        > .box[data-width-lrg="#{$i}"] { width: bx-cols($i,$count,$tight); display: block; }
      }
    }
  }
  // xl
  @media #{$media-xl-up} {
    > .box[data-width-xl="fill"] { flex-grow: 1; }
    @for $i from 0 through $count {
      @if( $i==0 ) {
        > .box[data-width-xl="#{$i}"] { display: none; }
      } @else {
        > .box[data-width-xl="#{$i}"] { width: bx-cols($i,$count,$tight); display: block; }
      }
    }
  }
}

/*
BOX % FUNCTIONS
 */
@function bx-percent($percent,$tight){
  @if $percent == 33 { $percent: 33.33; } @elseif $percent == 66 { $percent: 66.66; }
  $percent: $percent+%;
  @if $tight == true {
    @return $percent;
  } @else {
    @return calc( #{$percent} - #{$gutterX} );
  }
}
@mixin bx-percent-output($tight) {
  // tny
  @for $i from 1 through 100 {
    > .box[data-width-tny="#{$i}"] { width: bx-percent($i,$tight); }
  }
  // sml
  @media screen and (min-width: 500px) {
    @for $i from 1 through 100 {
      > .box[data-width-sml="#{$i}"] { width: bx-percent($i,$tight); }
    }
  }
  // med
  @media screen and (min-width: 800px) {
    @for $i from 1 through 100 {
      > .box[data-width-med="#{$i}"] { width: bx-percent($i,$tight); }
    }
  }
  // lrg
  @media screen and (min-width: 1100px) {
    @for $i from 1 through 100 {
      > .box[data-width-lrg="#{$i}"] { width: bx-percent($i,$tight); }
    }
  }
  // xl
  @media screen and (min-width: 1500px) {
    @for $i from 1 through 100 {
      > .box[data-width-xl="#{$i}"] { width: bx-percent($i,$tight); }
    }
  }
}

/*
BOX COLUMNS
 */
.boxes {

  // horizontal layout (default)
  display: flex;
  flex-direction: row;
  flex-wrap: wrap;
  margin-left: calc( #{$gutterX} / 2 );
  margin-right: calc( #{$gutterX} / 2 );

  // tight
  &.boxes-tight {
    margin-left: calc( -#{$gutterX} / 2 );
    margin-right: calc( -#{$gutterX} / 2 );
  }

  // box widths
  &:not(.boxes-tight) > .box {
    width: bx-cols(12, 12, false);
  }
  &.boxes-tight > .box {
    width: bx-cols(12, 12, true);
  }

  // vertical layout (data-direction="vertical")
  &[data-direction="vertical"] {
    height: 100%;
    flex-direction: column;

    // tight
    &.boxes-tight {
      margin-left: 0px;
      margin-right: 0px;
    }
    // the box
    .box {
      margin-left: 0px;
      margin-right: 0px;
      margin-bottom: $gutterY;
      width: auto;
    }

  }

  // widths and heights
  @include bx-cols-output( 12, false);

  /*
  BOX % PERCENTAGES

  &[data-box-widths="%"] {
    &:not(.boxes-tight) {
      @include bx-percent-output(false);
    }
    .boxes-tight {
      @include bx-percent-output(true);
    }
  }
  */

}

// the box (outside above .boxes so it's easy to override with util classes)
.box {
  margin-left: calc( #{$gutterX} / 2 );
  margin-right: calc( #{$gutterX} / 2 );
  margin-bottom: $gutterY;
}
