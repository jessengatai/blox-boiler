/*
MAX WIDTHS
 */
.max-width {
  max-width: $container-max-width;
}
.max-width--thin {
  max-width: $container-max-width--thin !important;
}
.max-width--full {
  max-width: 100%;
}
.max-width--half {
  max-width: 50%;
}
.max-width--third {
  max-width: 33.33333%;
}
.max-width--tny {
  max-width: $sml-breakpoint;
}
.max-width--sml {
  max-width: $med-breakpoint;
}
.max-width--med {
  max-width: $lrg-breakpoint;
}
.max-width--lrg {
  max-width: $xl-breakpoint;
}

/*
FULL WIDTHS
 */
.full-width {
  max-width: 100%;
  min-width: 100%;
}
.full-width-gutter-x {
  width: calc( 100% - #{$gutterX} );
}

/*
FULL HEIGHTS
 */
.full-height {
  max-height: none;
  min-height: 100%;
}

// plain css positions
.align-center {
  margin-left: auto;
  margin-right: auto;
}
.float-left {
  float: left;
}
.float-right {
  float: right;
}

// transform positions
.transform-center-x {
  left: 50%;
  transform: translateX(-50%);
  position: relative;
}
.transform-center-y {
  top: 50%;
  transform: translateY(-50%);
  position: relative;
}
.transform-center-xy {
  top: 50%;
  left: 50%;
  transform: translate3d(-50%, -50%, 0);
  position: relative;
}

// make the margins and paddings work via a loop
// $directionArray: top, bottom, left, right, x, y;

/*
RESIZES
 */
.resize {
 resize: both;
 overflow: auto;
}
.resize-vertical {
  resize: vertical;
  overflow: auto;
}
.resize-horizontal {
  resize: horizontal;
  overflow: auto;
}

/*
PADDINGS
 */
@mixin paddings {
  .padding {
    padding: $paddingY $paddingX;
  }
  .padding-top {
    padding-top: $paddingY;
  }
  .padding-bottom {
    padding-bottom: $paddingY;
  }
  .padding-left {
    padding-left: $paddingX;
  }
  .padding-right {
    padding-right: $paddingX;
  }
  .padding-x {
    padding-left: $paddingX;
    padding-right: $paddingX;
  }
  .padding-y {
    padding-top: $paddingY;
    padding-bottom: $paddingY;
  }

  // half paddings (clean this up)
  .padding--half {
    padding: ($paddingY / 2) ($paddingX / 2);
  }
  .padding-top--half {
    padding-top: ($paddingY / 2);
  }
  .padding-bottom--half {
    padding-bottom: ($paddingY / 2);
  }
  @for $i from 2 through 4 {
    .padding-top--x#{$i} {
      padding-top: ($paddingY * $i);
    }
    .padding-bottom--x#{$i} {
      padding-bottom: ($paddingY * $i);
    }
    .padding-left--x#{$i} {
      padding-left: ($paddingX * $i);
    }
    .padding-right--x#{$i} {
      padding-right: ($paddingX * $i);
    }
    .padding-x--x#{$i} {
      padding-left: ($paddingX * $i);
      padding-right: ($paddingX * $i);
    }
    .padding-y--x#{$i} {
      padding-top: ($paddingY * $i);
      padding-bottom: ($paddingY * $i);
    }
    .padding--x#{$i} {
      padding: ($paddingY * $i) ($paddingX * $i);
    }
  }
}
@include paddings;

/*
MARGINS
 */
@mixin margins {
  .margin-top {
    margin-top: $paddingY;
  }
  .margin-bottom {
    margin-bottom: $paddingY;
  }
  .margin-left {
    margin-left: $paddingX;
  }
  .margin-right {
    margin-right: $paddingX;
  }
  .margin-x {
    margin-left: $paddingX;
    margin-right: $paddingX;
  }
  .margin-y {
    margin-top: $paddingY;
    margin-bottom: $paddingY;
  }
  .margin {
    margin: $paddingY $paddingX;
  }
  @for $i from 2 through 4 {
    .margin-top--x#{$i} {
      margin-top: ($gutterY * $i);
    }
    .margin-bottom--x#{$i} {
      margin-bottom: ($gutterY * $i);
    }
    .margin-left--x#{$i} {
      margin-left: ($gutterX * $i);
    }
    .margin-right--x#{$i} {
      margin-right: ($gutterX * $i);
    }
    .margin-x--x#{$i} {
      margin-left: ($gutterX * $i);
      margin-right: ($gutterX * $i);
    }
    .margin-y--x#{$i} {
      margin-top: ($gutterY * $i);
      margin-bottom: ($gutterY * $i);
    }
    .margin--x#{$i} {
      margin: ($gutterY * $i) ($gutterY * $i);
    }
  }
}
@include margins;



// tight
.tight {
  margin: 0px !important;
}
.tight--top {
  margin-top: 0px !important;
}
.tight--bottom {
  margin-bottom: 0px !important;
}
.tight--padding {
  padding: 0px !important;
}


// gutters
.gutter-x {
  margin-left: calc( #{$gutterX} / 2);
  margin-right: calc( #{$gutterX} / 2);
}
.gutter-y {
  margin-top: $gutterY;
  margin-bottom: $gutterY;
}
.gutter {
  margin: $gutterY calc( #{$gutterX} / 2);
}

// border radius
.rounded {
  border-radius: 6px;
}
.rounded--lrg {
  border-radius: 12px;
}
.circular {
  border-radius: 999px !important;
}

// offsets
@mixin offsets {
  .offset-top {
    top: $gutterY;
  }
  .offset-bottom {
    bottom: $gutterY;
  }
  .offset-left {
    left: $gutterX;
  }
  .offset-right {
    right: $gutterX;
  }
  @for $i from 2 through 4 {
    .offset-top--x#{$i} {
      top: ($gutterY * $i);
    }
    .offset-bottom--x#{$i} {
      bottom: ($gutterY * $i);
    }
    .offset-left--x#{$i} {
      left: ($gutterX * $i);
    }
    .offset-right--x#{$i} {
      right: ($gutterX * $i);
    }
  }
}
@include offsets;

/*
DEBOSS
 */
.invisible-deboss {
 border-radius: 6px;
 border: solid 1px transparent;
 padding: $paddingY $paddingX;
}
.deboss,
[class*="deboss-"] {
  background: $white;
  border: solid 1px darken($white,10);
  box-shadow: 0 3px 7px rgba(0,0,0,.03);
  border-radius: 6px;
  padding: $paddingY $paddingX;

  .inverted & {
    background: lighten($black,2);
    border: solid 1px lighten($black,5);
    box-shadow: 0 3px 7px rgba(0,0,0,.15);
  }
}
@mixin debossColors($colors, $values){
  @for $i from 1 through length($colors) {
    .deboss--#{nth($colors, $i)} {
      background-color: lighten( nth($values, $i), 25);
      border-color: lighten( nth($values, $i), 15);
    }
  }
}
@include debossColors($colorKeys, $colorValues);

/*
SHADOWS
 */
.shadow {
  box-shadow: 0 5px 10px rgba(0,0,0,.08);
}
.shadow-lrg {
  box-shadow: 0 15px 30px rgba(0, 0, 0, 0.18);
}
.shadow-sml {
  box-shadow: 0 3px 7px rgba(0,0,0,.03);
}
.shadow--bottom {
  box-shadow: 0 15px 10px -10px rgba(0,0,0,.03);
}

// these need to finished and perfected
.shadow--inset {
  box-shadow: inset 0 5px 10px rgba(0,0,0,.08);
}
.shadow-lrg--inset {
  box-shadow: inset 0 -15px 25px -10px rgba(0,0,0,.02);
}


/*
TEXT SHADOWS
 */
.text-shadow {
  text-shadow:  0 1px 3px rgba(0,0,0,.4);
}

/*
BORDERS
*/
[class*="border-all"] {
  border-width: $border-weight !important;
  border-style: solid;
  border-color: $border-color;
  .inverted & {
    border-color: $inverted-border-color;
  }
}
[class*="border-top"] {
  border-top-width: $border-weight !important;
  border-top-style: solid;
  border-color: $border-color;
  .inverted & {
    border-color: $inverted-border-color;
  }
}
[class*="border-bottom"] {
  border-bottom-width: $border-weight !important;
  border-bottom-style: solid;
  border-color: $border-color;
  .inverted & {
    border-color: $inverted-border-color;
  }
}
[class*="border-left"] {
  border-left-width: $border-weight !important;
  border-left-style: solid;
  border-color: $border-color;
  .inverted & {
    border-color: $inverted-border-color;
  }
}
[class*="border-right"] {
  border-right-width: $border-weight !important;
  border-right-style: solid;
  border-color: $border-color;
  .inverted & {
    border-color: $inverted-border-color;
  }
}
@mixin borderColours($colors, $values){
  @for $i from 1 through length($colors) {
    .border-all--#{nth($colors, $i)} {
      border-color: #{nth($values, $i)}
    }
    .border-top--#{nth($colors, $i)} {
      border-top-color: #{nth($values, $i)}
    }
    .border-bottom--#{nth($colors, $i)} {
      border-bottom-color: #{nth($values, $i)}
    }
    .border-left--#{nth($colors, $i)} {
      border-left-color: #{nth($values, $i)}
    }
    .border-right--#{nth($colors, $i)} {
      border-right-color: #{nth($values, $i)}
    }
  }
}
@include borderColours($colorKeys, $colorValues);

/*
BACKGROUND COLORS
 */
[class*="bg-"] {
  background-color: inherit;
}
@mixin bgColours($colors, $values){
  @for $i from 1 through length($colors) {
    .bg-#{nth($colors, $i)} {
      background-color: #{nth($values, $i)};
    }
    // darken
    @for $n from 1 through 10 {
      .bg-#{nth($colors, $i)}--darker-#{$n} {
        @if $n==1 {
          background-color: darken( nth($values, $i), ($n * 3));
        } @else {
          background-color: darken( nth($values, $i), ($n * 5));
        }
      }
    }
    // lighten
    @for $n from 1 through 10 {
      .bg-#{nth($colors, $i)}--lighter-#{$n} {
        @if $n==1 {
          background-color: lighten( nth($values, $i), ($n * 3));
        } @else {
          background-color: lighten( nth($values, $i), ($n * 5));
        }
      }
    }
  }
}
@include bgColours($colorKeys, $colorValues);

/*
TEXT COLORS (needs to be cleaned up a lot, not good for final css filesize)
 */
[class*="color-"] {
  color: inherit;
}
@mixin colors($colors, $values){
  @for $i from 1 through length($colors) {
    .color-#{nth($colors, $i)} {
      color: #{nth($values, $i)};
    }
    // contrast
    .color-#{nth($colors, $i)}--contrast {
      color: choose-contrast-color(nth($values, $i));
    }
    // darken
    @for $n from 1 through 10 {
      .color-#{nth($colors, $i)}--darker-#{$n} {
        @if $n==1 {
          color: darken( nth($values, $i), ($n * 3));
        } @else {
          color: darken( nth($values, $i), ($n * 5));
        }
      }
    }
    // lighten
    @for $n from 1 through 10 {
      .color-#{nth($colors, $i)}--lighter-#{$n} {
        @if $n==1 {
          color: lighten( nth($values, $i), ($n * 3));
        } @else {
          color: lighten( nth($values, $i), ($n * 5));
        }
      }
    }
  }
}
@include colors($colorKeys, $colorValues);


/*
HEADER TEXT COLOR (PRIMARILY OVERRIDES)
 */
// :matches(h1,h2,h3,h4,h5,h6),
// :-moz-any(h1,h2,h3,h4,h5,h6),
// :-webkit-any(h1,h2,h3,h4,h5,h6)
h1,h2,h3,h4,h5,h6 {
  @extend %headings !optional;
}

[class*="headers-"] %headings {
  color: inherit;
}
@mixin headers($colors, $values){
  @for $i from 1 through length($colors) {
    .headers-#{nth($colors, $i)} %headings {
      color: #{nth($values, $i)};
    }
    // contrast
    .headers-#{nth($colors, $i)}--contrast %headings {
      color: choose-contrast-color(nth($values, $i));
    }
    // darken
    @for $n from 1 through 10 {
      .headers-#{nth($colors, $i)}--darker-#{$n} %headings {
        @if $n==1 {
          color: darken( nth($values, $i), ($n * 3));
        } @else {
          color: darken( nth($values, $i), ($n * 5));
        }
      }
    }
    // lighten
    @for $n from 1 through 10 {
      .headers-#{nth($colors, $i)}--lighter-#{$n} %headings {
        @if $n==1 {
          color: lighten( nth($values, $i), ($n * 3));
        } @else {
          color: lighten( nth($values, $i), ($n * 5));
        }
      }
    }
  }
}
@include headers($colorKeys, $colorValues);

/*
FONT WEIGHTS
 */
@mixin weights{
  @for $i from 1 through 9 {
    .weight-#{$i}00 {
      font-weight: ($i * 100);
    }
  }
}
@include weights;

/*
TEXT ALIGNMENT
 */
.text-center {
  text-align: center;
}
.text-left {
  text-align: left;
}
.text-right {
  text-align: right;
}
.text-justify {
  text-align: justify;
}

/*
TEXT DECORATIONS
 */
@mixin underline {
  position: relative;
  &:after {
    content: "";
    position: absolute;
    left: 0;
    right: 0;
    bottom: 0;
    height: 2px;
    transform: translateY(3px);
    background-color: darken($white,30);
    width: 100%;
  }
}
.underline {
  @include underline;
}

/*
TRANSTIONS
 */
.transition-all {
  transition: all 0.3s ease;
}
.transition-bg {
  transition: background 0.3s ease;
}

/*
OVERFLOWS
 */
.overflow-hidden {
  overflow: hidden;
}

/*
POSITIONS
 */
.position-relative {
  position: relative;
}

/*
SMART BACKGROUNDS
 */
.bg-image,
.bg-gradient,
.bg-color {
  position: absolute;
  top: 0;
  bottom: 0;
  left: 0;
  right: 0;
  min-width: 100%;
  min-height: 100%;
  z-index: -1;
  pointer-events: none;
  background-color: transparent;

  // default size and position
  background-size: cover;
  background-position: center;

}

.bg-image {
  transition: background-image 0.2s ease !important;
}

/*
INVERTED LOGIC
 */
.inverted .bg-white--darker-1 {
  background: darken($black,2);
}




.flex {
  display: flex;
}
.col {

}
