// widths
.max-width {
  max-width: $container-max-width;
}
.max-width-thin {
  max-width: $container-max-width-thin !important;
}
.full-width {
  max-width: 100%;
  min-width: 100%;
}
.full-width-gutter-x {
  width: calc( 100% - #{$gutterX} );
}

// heights
.full-height {
  max-height: none;
  min-height: 100%;
}

// plain css positions
.align-center {
  margin-left: auto;
  margin-right: auto;
}
.float-left {
  float: left;
}
.float-right {
  float: right;
}

// transform positions
.transform-center-x {
  left: 50%;
  transform: translateX(-50%);
}
.transform-center-y {
  top: 50%;
  transform: translateY(-50%);
}
.transform-center-xy {
  top: 50%;
  left: 50%;
  transform: translate3d(-50%, -50%, 0);
}

// padding top
.padding-top {
  padding-top: $paddingY;
}
.padding-top--x2 {
  padding-top: ($paddingY * 2);
}
.padding-top--x3 {
  padding-top: ($paddingY * 3);
}

// padding bottom
.padding-bottom {
  padding-bottom: $paddingY;
}
.padding-bottom--x2 {
  padding-bottom: ($paddingY * 2);
}
.padding-bottom--x3 {
  padding-bottom: ($paddingY * 3);
}

// padding x axis
.padding-x {
  padding-left: $paddingX;
  padding-right: $paddingX;
}
.padding-x--x2 {
  padding-left: ($paddingX * 2);
  padding-right: ($paddingX * 2);
}
.padding-x--x3 {
  padding-left: ($paddingX * 3);
  padding-right: ($paddingX * 3);
}

// padding y axis
.padding-y {
  padding-top: $paddingY;
  padding-bottom: $paddingY;
}
.padding-y--x2 {
  padding-top: ($paddingY * 2);
  padding-bottom: ($paddingY * 2);
}
.padding-y--x3 {
  padding-top: ($paddingY * 3);
  padding-bottom: ($paddingY * 3);
}

// padding global
.padding {
  padding: $paddingY $paddingX;
}
.padding--x2 {
  padding: ($paddingY * 2) ($paddingX * 2);
}
.padding--x3 {
  padding: ($paddingY * 3) ($paddingX * 3);
}


// margin top
.margin-top {
  margin-top: $gutterY;
}
.margin-top--x2 {
  margin-top: ($gutterY * 2);
}
.margin-top--x3 {
  margin-top: ($gutterY * 3);
}

// margin bottom
.margin-bottom {
  margin-bottom: $gutterY;
}
.margin-bottom--x2 {
  margin-bottom: ($gutterY * 2);
}
.margin-bottom--x3 {
  margin-bottom: ($gutterY * 3);
}

// margin left
.margin-left {
  margin-left: $gutterX;
}
.margin-left--x2 {
  margin-left: ($gutterX * 2);
}
.margin-left--x3 {
  margin-left: ($gutterX * 3);
}

// margin right
.margin-right {
  margin-right: $gutterX;
}
.margin-right--x2 {
  margin-right: ($gutterX * 2);
}
.margin-right--x3 {
  margin-right: ($gutterX * 3);
}

// margin x axis
.margin-x {
  margin-left: $gutterX;
  margin-right: $gutterX;
}
.margin-x--x2 {
  margin-left: ($gutterX * 2);
  margin-right: ($gutterX * 2);
}
.margin-x--x3 {
  margin-left: ($gutterX * 3);
  margin-right: ($gutterX * 3);
}

// margin y axis
.margin-y {
  margin-top: $gutterY;
  margin-bottom: $gutterY;
}
.margin-y--x2 {
  margin-top: ($gutterY * 2);
  margin-bottom: ($gutterY * 2);
}
.margin-y--x3 {
  margin-top: ($gutterY * 3);
  margin-bottom: ($gutterY * 3);
}

// margin global
.margin {
  margin: $gutterY $gutterX;
}
.margin--x2 {
  margin: ($gutterY * 2) ($gutterX * 2);
}
.margin--x3 {
  margin: ($gutterY * 3) ($gutterX * 3);
}

// tight
.tight {
  margin: 0px !important;
}
.tight--padding {
  padding: 0px !important;
}


// gutters
.gutter-x {
  margin-left: calc( #{$gutterX} / 2);
  margin-right: calc( #{$gutterX} / 2);
}
.gutter-y {
  margin-top: $gutterY;
  margin-bottom: $gutterY;
}
.gutter {
  margin: $gutterY calc( #{$gutterX} / 2);
}

// border radius
.rounded {
  border-radius: 6px;
}
.circular {
  border-radius: 999px !important;
}

// offsets
.offset-top {
  top: $gutterY;
}
.offset-bottom {
  bottom: $gutterY;
}
.offset-left {
  left: $gutterX;
}
.offset-right {
  right: $gutterX;
}

// shadows and cards
@mixin deboss {
  box-shadow: 0 3px 7px rgba(0,0,0,.03);
  border-radius: 6px;
  border: solid 1px $white-darker-2;
  padding: $paddingY $paddingX;
  background: #ffffff;
}
.deboss {
  @include deboss;
}
.deboss--orange {
  @include deboss;
  background-color: $orange-lighter-4;
  border-color: $orange-lighter-3;
}
.deboss--red {
  @include deboss;
  background-color: $red-lighter-4;
  border-color: $red-lighter-3;
}
.deboss--purple {
  @include deboss;
  background-color: $purple-lighter-4;
  border-color: $purple-lighter-3;
}
.deboss--blue {
  @include deboss;
  background-color: $blue-lighter-4;
  border-color: $blue-lighter-3;
}
.deboss--green {
  @include deboss;
  background-color: $green-lighter-4;
  border-color: $green-lighter-3;
}

// shadows
.shadow {
  box-shadow: 0 5px 10px rgba(0,0,0,.08);
}
.shadow-lrg {
  box-shadow: 0 15px 30px rgba(0, 0, 0, 0.18);
}
.shadow-sml {
  box-shadow: 0 3px 7px rgba(0,0,0,.03);
}

// borders
[class*="border--"] {
  border-width: $border-weight !important;
  border-style: solid;
}
[class*="border-top"] {
  border-top-width: $border-weight !important;
  border-top-style: solid;
}
[class*="border-bottom"] {
  border-bottom-width: $border-weight !important;
  border-bottom-style: solid;
}
[class*="border-left"] {
  border-left-width: $border-weight !important;
  border-left-style: solid;
}
[class*="border-right"] {
  border-right-width: $border-weight !important;
  border-right-style: solid;
}
@mixin borderColours($colors, $values){
  @for $i from 1 through length($colors) {
    .border--#{nth($colors, $i)} {
      border-color: #{nth($values, $i)}
    }
    .border-top--#{nth($colors, $i)} {
      border-top-color: #{nth($values, $i)}
    }
    .border-bottom--#{nth($colors, $i)} {
      border-bottom-color: #{nth($values, $i)}
    }
    .border-left--#{nth($colors, $i)} {
      border-left-color: #{nth($values, $i)}
    }
    .border-right--#{nth($colors, $i)} {
      border-right-color: #{nth($values, $i)}
    }
  }
}
@include borderColours($keys, $values);






// background colours
[class*="bg-"] {
  background-color: inherit;
}
@mixin bgColours($colors, $values){
  @for $i from 1 through length($colors) {
    .bg-#{nth($colors, $i)} {
      border-top-color: #{nth($values, $i)}
    }
  }
}
@include bgColours($keys, $values);


.bg-white {
  background: $white;
}
.bg-black {
  background: $black;
}
.bg-red {
  background: $red;
}
.bg-yellow {
  background: $yellow;
}
.bg-blue {
  background: $blue;
}
.bg-purple {
  background: $purple;
}
.bg-green {
  background: $green;
}

// font weights (alpha)
.weight-lighter {
  font-weight: 300;
}
.weight-normal {
  font-weight: 400;
}
.weight-heavier {
  font-weight: 600;
}
.weight-heaviest {
  font-weight: 800;
}

// font weights (numeric)
.weight-100 {
  font-weight: 100;
}
.weight-200 {
  font-weight: 200;
}
.weight-300 {
  font-weight: 300;
}
.weight-400 {
  font-weight: 400;
}
.weight-500 {
  font-weight: 500;
}
.weight-600 {
  font-weight: 600;
}
.weight-700 {
  font-weight: 700;
}
.weight-800 {
  font-weight: 800;
}
.weight-900 {
  font-weight: 900;
}

// text colors
.color-white {
  color: $white;
}
.color-black {
  color: $black;
}
.color-orange {
  color: $orange;
}
.color-orange--dark {
  color: $orange-darker-4;
}
.color-orange--light {
  color: $orange-lighter-4;
}
.color-red {
  color: $red;
}
.color-red--dark {
  color: $red-darker-4;
}
.color-red--light {
  color: $red-lighter-4;
}
.color-purple {
  color: $purple;
}
.color-purple--dark {
  color: $purple-darker-4;
}
.color-purple--light {
  color: $purple-lighter-4;
}
.color-blue {
  color: $blue;
}
.color-blue--dark {
  color: $blue-darker-4;
}
.color-blue--light {
  color: $blue-lighter-4;
}

// text alignment
.text-center {
  text-align: center;
}
.text-left {
  text-align: left;
}
.text-right {
  text-align: right;
}
.text-justify {
  text-align: justify;
}

// text decorations
@mixin underline {
  position: relative;
  &:after {
    content: "";
    position: absolute;
    left: 0;
    right: 0;
    bottom: 0;
    height: 2px;
    transform: translateY(3px);
    background-color: $white-darker-3;
    width: 100%;
  }
}
.underline {
  @include underline;
}

a.inline-link {
  color: $blue;
  display: inline-block;
  text-decoration: none;
  @extend .underline;

  &:hover {
    color: $black;
  }
  &.invert {
    color: $black;
    &:hover {
      color: $blue;
    }
  }
}
