// widths
.max-width {
  max-width: $container-max-width;
}
.max-width-thin {
  max-width: $container-max-width-thin !important;
}
.max-width-half {
  max-width: calc(50vw) !important;
}
.max-width-tny {
  max-width: 500px;
}
.min-width-tny {
  min-width: 500px;
}
.full-width {
  max-width: 100%;
  min-width: 100%;
}
.full-width-gutter-x {
  width: calc( 100% - #{$gutterX} );
}

// heights
.full-height {
  max-height: none;
  min-height: 100%;
}

// plain css positions
.align-center {
  margin-left: auto;
  margin-right: auto;
}
.float-left {
  float: left;
}
.float-right {
  float: right;
}

// transform positions
.transform-center-x {
  left: 50%;
  transform: translateX(-50%);
}
.transform-center-y {
  top: 50%;
  transform: translateY(-50%);
}
.transform-center-xy {
  top: 50%;
  left: 50%;
  transform: translate3d(-50%, -50%, 0);
}

/*
PADDINGS
 */
@mixin paddings {
  .padding-top {
    padding-top: $paddingY;
  }
  .padding-bottom {
    padding-bottom: $paddingY;
  }
  .padding-left {
    padding-left: $paddingX;
  }
  .padding-right {
    padding-right: $paddingX;
  }
  .padding-x {
    padding-left: $paddingX;
    padding-right: $paddingX;
  }
  .padding-y {
    padding-top: $paddingY;
    padding-bottom: $paddingY;
  }
  .padding {
    padding: $paddingY $paddingX;
  }
  @for $i from 2 through 4 {
    .padding-top--x#{$i} {
      padding-top: ($paddingY * $i);
    }
    .padding-bottom--x#{$i} {
      padding-bottom: ($paddingY * $i);
    }
    .padding-left--x#{$i} {
      padding-left: ($paddingX * $i);
    }
    .padding-right--x#{$i} {
      padding-right: ($paddingX * $i);
    }
    .padding-x--x#{$i} {
      padding-left: ($paddingX * $i);
      padding-right: ($paddingX * $i);
    }
    .padding-y--x#{$i} {
      padding-top: ($paddingY * $i);
      padding-bottom: ($paddingY * $i);
    }
    .padding--x#{$i} {
      padding: ($paddingY * $i) ($paddingX * $i);
    }
  }
}
@include paddings;

.padding-top--half {
  padding-top: ($paddingY / 2);
}
.padding-bottom--half {
  padding-bottom: ($paddingY / 2);
}

/*
MARGINS
 */
@mixin margins {
  .margin-top {
    margin-top: $paddingY;
  }
  .margin-bottom {
    margin-bottom: $paddingY;
  }
  .margin-left {
    margin-left: $paddingX;
  }
  .margin-right {
    margin-right: $paddingX;
  }
  .margin-x {
    margin-left: $paddingX;
    margin-right: $paddingX;
  }
  .margin-y {
    margin-top: $paddingY;
    margin-bottom: $paddingY;
  }
  .margin {
    margin: $paddingY $paddingX;
  }
  @for $i from 2 through 4 {
    .margin-top--x#{$i} {
      margin-top: ($gutterY * $i);
    }
    .margin-bottom--x#{$i} {
      margin-bottom: ($gutterY * $i);
    }
    .margin-left--x#{$i} {
      margin-left: ($gutterX * $i);
    }
    .margin-right--x#{$i} {
      margin-right: ($gutterX * $i);
    }
    .margin-x--x#{$i} {
      margin-left: ($gutterX * $i);
      margin-right: ($gutterX * $i);
    }
    .margin-y--x#{$i} {
      margin-top: ($gutterY * $i);
      margin-bottom: ($gutterY * $i);
    }
    .margin--x#{$i} {
      margin: ($gutterY * $i) ($gutterY * $i);
    }
  }
}
@include margins;



// tight
.tight {
  margin: 0px !important;
}
.tight--padding {
  padding: 0px !important;
}


// gutters
.gutter-x {
  margin-left: calc( #{$gutterX} / 2);
  margin-right: calc( #{$gutterX} / 2);
}
.gutter-y {
  margin-top: $gutterY;
  margin-bottom: $gutterY;
}
.gutter {
  margin: $gutterY calc( #{$gutterX} / 2);
}

// border radius
.rounded {
  border-radius: 6px;
}
.circular {
  border-radius: 999px !important;
}

// offsets
@mixin offsets {
  .offset-top {
    top: $gutterY;
  }
  .offset-bottom {
    bottom: $gutterY;
  }
  .offset-left {
    left: $gutterX;
  }
  .offset-right {
    right: $gutterX;
  }
  @for $i from 2 through 4 {
    .offset-top--x#{$i} {
      top: ($gutterY * $i);
    }
    .offset-bottom--x#{$i} {
      bottom: ($gutterY * $i);
    }
    .offset-left--x#{$i} {
      left: ($gutterX * $i);
    }
    .offset-right--x#{$i} {
      right: ($gutterX * $i);
    }
  }
}
@include offsets;

/*
DEBOSS
 */
.invisible-deboss {
 border-radius: 6px;
 border: solid 1px transparent;
 padding: $paddingY $paddingX;
}
.deboss,
[class*="deboss-"] {
  box-shadow: 0 3px 7px rgba(0,0,0,.03);
  border-radius: 6px;
  border: solid 1px darken($white,10);
  padding: $paddingY $paddingX;
  background: #ffffff;
}
@mixin debossColors($colors, $values){
  @for $i from 1 through length($colors) {
    .deboss--#{nth($colors, $i)} {
      background-color: lighten( nth($values, $i), 25);
      border-color: lighten( nth($values, $i), 15);
    }
  }
}
@include debossColors($colorKeys, $colorValues);

/*
SHADOWS
 */
.shadow {
  box-shadow: 0 5px 10px rgba(0,0,0,.08);
}
.shadow-lrg {
  box-shadow: 0 15px 30px rgba(0, 0, 0, 0.18);
}
.shadow-sml {
  box-shadow: 0 3px 7px rgba(0,0,0,.03);
}
.shadow--bottom {
  box-shadow: 0 15px 10px -10px rgba(0,0,0,.03);
}

/*
BORDERS
*/
[class*="border-all"] {
  border-width: $border-weight !important;
  border-style: solid;
  border-color: $border-color;
}
[class*="border-top"] {
  border-top-width: $border-weight !important;
  border-top-style: solid;
  border-color: $border-color;
}
[class*="border-bottom"] {
  border-bottom-width: $border-weight !important;
  border-bottom-style: solid;
  border-color: $border-color;
}
[class*="border-left"] {
  border-left-width: $border-weight !important;
  border-left-style: solid;
  border-color: $border-color;
}
[class*="border-right"] {
  border-right-width: $border-weight !important;
  border-right-style: solid;
  border-color: $border-color;
}
@mixin borderColours($colors, $values){
  @for $i from 1 through length($colors) {
    .border-all--#{nth($colors, $i)} {
      border-color: #{nth($values, $i)}
    }
    .border-top--#{nth($colors, $i)} {
      border-top-color: #{nth($values, $i)}
    }
    .border-bottom--#{nth($colors, $i)} {
      border-bottom-color: #{nth($values, $i)}
    }
    .border-left--#{nth($colors, $i)} {
      border-left-color: #{nth($values, $i)}
    }
    .border-right--#{nth($colors, $i)} {
      border-right-color: #{nth($values, $i)}
    }
  }
}
@include borderColours($colorKeys, $colorValues);


// background colours
[class*="bg-"] {
  background-color: inherit;
}
@mixin bgColours($colors, $values){
  @for $i from 1 through length($colors) {
    .bg-#{nth($colors, $i)} {
      background-color: #{nth($values, $i)}
    }
    .bg-#{nth($colors, $i)}--darker-1 {
      background-color: darken( nth($values, $i), 3%);
    }
    .bg-#{nth($colors, $i)}--darker-2 {
      background-color: darken( nth($values, $i), 10%);
    }
    .bg-#{nth($colors, $i)}--darker-3 {
      background-color: darken( nth($values, $i), 15%);
    }
    .bg-#{nth($colors, $i)}--darker-4 {
      background-color: darken( nth($values, $i), 20%);
    }
    .bg-#{nth($colors, $i)}--darker-5 {
      background-color: darken( nth($values, $i), 25%);
    }
    .bg-#{nth($colors, $i)}--darker-6 {
      background-color: darken( nth($values, $i), 30%);
    }
    .bg-#{nth($colors, $i)}--darker-7 {
      background-color: darken( nth($values, $i), 35%);
    }
    .bg-#{nth($colors, $i)}--darker-8 {
      background-color: darken( nth($values, $i), 40%);
    }
    .bg-#{nth($colors, $i)}--darker-9 {
      background-color: darken( nth($values, $i), 45%);
    }
    .bg-#{nth($colors, $i)}--darker-10 {
      background-color: darken( nth($values, $i), 50%);
    }
    .bg-#{nth($colors, $i)}--lighter-1 {
      background-color: lighten( nth($values, $i), 3%);
    }
    .bg-#{nth($colors, $i)}--lighter-2 {
      background-color: lighten( nth($values, $i), 10%);
    }
    .bg-#{nth($colors, $i)}--lighter-3 {
      background-color: lighten( nth($values, $i), 15%);
    }
    .bg-#{nth($colors, $i)}--lighter-4 {
      background-color: lighten( nth($values, $i), 20%);
    }
    .bg-#{nth($colors, $i)}--lighter-5 {
      background-color: lighten( nth($values, $i), 25%);
    }
    .bg-#{nth($colors, $i)}--lighter-6 {
      background-color: lighten( nth($values, $i), 30%);
    }
    .bg-#{nth($colors, $i)}--lighter-7 {
      background-color: lighten( nth($values, $i), 35%);
    }
    .bg-#{nth($colors, $i)}--lighter-8 {
      background-color: lighten( nth($values, $i), 40%);
    }
    .bg-#{nth($colors, $i)}--lighter-9 {
      background-color: lighten( nth($values, $i), 45%);
    }
    .bg-#{nth($colors, $i)}--lighter-10 {
      background-color: lighten( nth($values, $i), 50%);
    }
  }
}
@include bgColours($colorKeys, $colorValues);

// text colors
[class*="color-"] {
  color: inherit;
}
@mixin colors($colors, $values){
  @for $i from 1 through length($colors) {
    .color-#{nth($colors, $i)} {
      color: #{nth($values, $i)}
    }
    .color-#{nth($colors, $i)}--darker-1 {
      color: darken( nth($values, $i), 3%);
    }
    .color-#{nth($colors, $i)}--darker-2 {
      color: darken( nth($values, $i), 10%);
    }
    .color-#{nth($colors, $i)}--darker-3 {
      color: darken( nth($values, $i), 15%);
    }
    .color-#{nth($colors, $i)}--darker-4 {
      color: darken( nth($values, $i), 20%);
    }
    .color-#{nth($colors, $i)}--darker-5 {
      color: darken( nth($values, $i), 25%);
    }
    .color-#{nth($colors, $i)}--darker-6 {
      color: darken( nth($values, $i), 30%);
    }
    .color-#{nth($colors, $i)}--darker-7 {
      color: darken( nth($values, $i), 35%);
    }
    .color-#{nth($colors, $i)}--darker-8 {
      color: darken( nth($values, $i), 40%);
    }
    .color-#{nth($colors, $i)}--darker-9 {
      color: darken( nth($values, $i), 45%);
    }
    .color-#{nth($colors, $i)}--darker-10 {
      color: darken( nth($values, $i), 50%);
    }
    .color-#{nth($colors, $i)}--lighter-1 {
      color: lighten( nth($values, $i), 3%);
    }
    .color-#{nth($colors, $i)}--lighter-2 {
      color: lighten( nth($values, $i), 10%);
    }
    .color-#{nth($colors, $i)}--lighter-3 {
      color: lighten( nth($values, $i), 15%);
    }
    .color-#{nth($colors, $i)}--lighter-4 {
      color: lighten( nth($values, $i), 20%);
    }
    .color-#{nth($colors, $i)}--lighter-5 {
      color: lighten( nth($values, $i), 25%);
    }
    .color-#{nth($colors, $i)}--lighter-6 {
      color: lighten( nth($values, $i), 30%);
    }
    .color-#{nth($colors, $i)}--lighter-7 {
      color: lighten( nth($values, $i), 35%);
    }
    .color-#{nth($colors, $i)}--lighter-8 {
      color: lighten( nth($values, $i), 40%);
    }
    .color-#{nth($colors, $i)}--lighter-9 {
      color: lighten( nth($values, $i), 45%);
    }
    .color-#{nth($colors, $i)}--lighter-10 {
      color: lighten( nth($values, $i), 50%);
    }
  }
}
@include colors($colorKeys, $colorValues);


// font weights (numeric)
@mixin weights{
  @for $i from 1 through 9 {
    .weight-#{$i}00 {
      font-weight: ($i * 100);
    }
  }
}
@include weights;

// text alignment
.text-center {
  text-align: center;
}
.text-left {
  text-align: left;
}
.text-right {
  text-align: right;
}
.text-justify {
  text-align: justify;
}

// text decorations
@mixin underline {
  position: relative;
  &:after {
    content: "";
    position: absolute;
    left: 0;
    right: 0;
    bottom: 0;
    height: 2px;
    transform: translateY(3px);
    background-color: darken($white,30);
    width: 100%;
  }
}
.underline {
  @include underline;
}

a.inline-link {
  color: $blue;
  display: inline-block;
  text-decoration: none;
  @extend .underline;

  &:hover {
    color: $black;
  }
  &.invert {
    color: $black;
    &:hover {
      color: $blue;
    }
  }
}


.transition-all {
  transition: all 0.3s ease;
}
.transition-bg {
  transition: background 0.3s ease;
}



.scroll-y {
  overflow-y: scroll;
  height: 100%;
}
.overflow-hidden {
  overflow: hidden;
}


.position-relative {
  position: relative;
}
.bg-image {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  z-index: -1;
  &.bg-cover {
    background-size: cover;
    background-position: right;
  }
  &.bg-blur {
    filter: blur(10px);
    transform: scale(1.1);
  }
  &.bg-multiply {
    background-blend-mode: multiply;
  }
}
